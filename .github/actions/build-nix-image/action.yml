name: "Build Nix Docker Image"
description: "Builds a Docker image using Nix"
inputs:
  triggerEventName:
    description: "The name of the event that triggered the workflow"
    required: true
  imageName:
    description: "Name of the Docker image"
    required: true
  imageFQN:
    description: "Fully Qualified Name of the Docker image"
    required: true
  nixCommand:
    description: "Nix command to build the image"
    required: true
  releaseVersion:
    description: "Release version"
    required: true
  cachixCacheName:
    description: "Name of the Cachix cache"
    required: true
  cachixAuthToken:
    description: "Cachix authentication token"
    required: true

runs:
  using: "composite"
  steps:
    - name: Setup QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
      with:
        platforms: arm64

    - name: Install Skopeo
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -yq skopeo
        sudo apt-get clean

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@786fff0690178f1234e4e1fe9b536e94f5433196 # ratchet:DeterminateSystems/nix-installer-action@main
      with:
        extra-conf: |
          extra-platforms = aarch64-linux

    - name: Setup Remote Nix Cache
      uses: cachix/cachix-action@ee79db531bfb851a7cf47035057b7cca88d26449 # ratchet:cachix/cachix-action@master
      with:
        name: "${{ inputs.cachixCacheName }}"
        authToken: "${{ inputs.cachixAuthToken }}"

    - name: Set GitHub CI Slug Variables
      uses: rlespinasse/github-slug-action@797d68864753cbceedc271349d402da4590e6302 # ratchet:rlespinasse/github-slug-action@v4
      with:
        prefix: CI_

    - name: Set git variables
      shell: bash
      run: |
        echo "GIT_REPO_NAME=$CI_GITHUB_REPOSITORY_NAME_PART" >> $GITHUB_ENV
        echo "GIT_REF=$CI_GITHUB_REF_NAME" >> $GITHUB_ENV
        if [ "${{ inputs.triggerEventName }}" == "pull_request" ]; then
          echo "GIT_SHA=$CI_GITHUB_EVENT_PULL_REQUEST_HEAD_SHA" >> $GITHUB_ENV
          echo "GIT_SHA_SHORT=$CI_GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT" >> $GITHUB_ENV
        # elif [ -n "${{ inputs.releaseVersion }}" ]; then
        #   tag_base="${{ inputs.releaseVersion }}"
        #   echo "tag_base=$tag_base"
        #   if [[ $tag_base =~ ^[0-9] ]]; then
        #     tag="v$tag_base"
        #   else
        #     tag="$tag_base"
        #   fi

        #   sha=$(git rev-parse "$tag")
        #   short_sha=$(git rev-parse --short "$tag")

        #   echo "GIT_SHA=$sha" >> $GITHUB_ENV
        #   echo "GIT_SHA_SHORT=$short_sha" >> $GITHUB_ENV
        else
          echo "GIT_SHA=$CI_GITHUB_SHA" >> $GITHUB_ENV
          echo "GIT_SHA_SHORT=$CI_GITHUB_SHA_SHORT" >> $GITHUB_ENV
        fi

    - name: Set nix variables
      shell: bash
      run: |
        echo "NIX_IMAGE_SYSTEMS=x86_64-linux" >> $GITHUB_ENV

    # Toggle this section to enable tmate debug session
    # - name: Setup tmate debug session
    #   uses: mxschmitt/action-tmate@e5c7151931ca95bad1c6f4190c730ecf8c7dde48 # ratchet:mxschmitt/action-tmate@v3
    #   env:
    #     GH_TOKEN: ${{ github.token }}
    #     VERSION: ${{ inputs.releaseVersion }}

    - name: Build and Push Docker Image
      shell: bash
      run: |
        set -euxo pipefail

        echo "Using Git Repository Name: $GIT_REPO_NAME"
        echo "Using Git Reference: $GIT_REF"
        echo "Using Git SHA: $GIT_SHA"
        echo "Using Git SHA Short: $GIT_SHA_SHORT"
        FQN_GIT_SHA="${{ inputs.imageFQN }}:$GIT_SHA"

        echo "Image FQN with Git SHA: $FQN_GIT_SHA"
        df -h

        # Check if image exists,
        # handle both 404 (manifest unknown) and 403 (forbidden) errors
        # which can occur when the image or repository doesn't exist yet
        if SKOPEO_OUTPUT=$(skopeo inspect "docker://$FQN_GIT_SHA" 2>&1); then
          echo "Image $FQN_GIT_SHA already exists. Skipping build."
        else
          if echo "$SKOPEO_OUTPUT" | grep -q 'manifest unknown' || \
             echo "$SKOPEO_OUTPUT" | grep -q 'invalid status code from registry 403' || \
             echo "$SKOPEO_OUTPUT" | grep -q 'invalid status code from registry 404'; then
            echo "Image $FQN_GIT_SHA does not exist. Building."
            nix-channel --update
            podman manifest inspect docker.io/library/flocken:latest || true
            podman manifest inspect quay.io/flocken:latest || true
            ${{ inputs.nixCommand }}
          else
            echo "Failed to inspect image with error: $SKOPEO_OUTPUT"
            exit 1
          fi
        fi

        df -h
      env:
        GH_TOKEN: ${{ github.token }}
        VERSION: ${{ inputs.releaseVersion }}

    - name: Check Nix Store usage
      shell: bash
      run: |
        set -euxo pipefail

        df -h
        nix store gc --dry-run --debug
        df -h
