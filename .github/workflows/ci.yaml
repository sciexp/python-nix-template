name: "CI/CD"

on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: "Run the workflow with tmate.io debugging enabled"
        required: true
        type: boolean
        default: false
      run_build_images:
        description: "Run build-images job"
        required: false
        type: boolean
        default: false
  pull_request:
    types: [opened, labeled, reopened, synchronize]
    paths-ignore:
      - "**/*.md"
      - "*"
      - "!flake.nix"
      - "!flake.lock"
      - "!pyproject.toml"
      - "!uv.lock"
  push:
    branches:
      - "main"
      - "beta"
    paths-ignore:
      - "**/*.md"
      - "*"
      - "!flake.nix"
      - "!flake.lock"
      - "!pyproject.toml"
      - "!uv.lock"

defaults:
  run:
    shell: bash

permissions:
  contents: read
  packages: write
  attestations: write
  actions: write
  id-token: write

jobs:
  scan:
    name: gitguardian
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history so multiple commits can be scanned
      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@455483042671cc73b40d0e753baddffef7309a1f # ratchet:GitGuardian/ggshield-action@v1.37.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  set-variables:
    needs: scan
    runs-on: ubuntu-latest
    outputs:
      debug: ${{ steps.set-variables.outputs.debug }}
      skip_ci: ${{ steps.set-variables.outputs.skip_ci }}
      skip_tests: ${{ steps.set-variables.outputs.skip_tests }}
      dry_run_release: ${{ steps.set-variables.outputs.dry_run_release }}
      checkout_ref: ${{ steps.set-variables.outputs.checkout_ref }}
      checkout_rev: ${{ steps.set-variables.outputs.checkout_rev }}

    steps:
      - name: Set action variables
        id: set-variables
        run: |
          DEBUG="false"
          SKIP_CI="false"
          SKIP_TESTS="false"
          DRY_RUN_RELEASE="false"

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEBUG="${{ inputs.debug_enabled }}"
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if ${{ contains(github.event.pull_request.labels.*.name, 'skip-ci') }}; then
              SKIP_CI="true"
            fi
            if ${{ contains(github.event.pull_request.labels.*.name, 'skip-tests') }}; then
              SKIP_TESTS="true"
            fi
            if ${{ contains(github.event.pull_request.labels.*.name, 'actions-debug') }}; then
              DEBUG="true"
            fi
            if ${{ contains(github.event.pull_request.labels.*.name, 'release-dry-run') }}; then
              DRY_RUN_RELEASE="true"
            fi
            CHECKOUT_REF="${{ github.event.pull_request.head.ref }}"
            CHECKOUT_REV="${{ github.event.pull_request.head.sha }}"
          else
            CHECKOUT_REF="${{ github.ref_name }}"
            CHECKOUT_REV="${{ github.sha }}"
          fi

          echo "DEBUG=$DEBUG"
          echo "SKIP_CI=$SKIP_CI"
          echo "SKIP_TESTS=$SKIP_TESTS"
          echo "CHECKOUT_REF=$CHECKOUT_REF"
          echo "CHECKOUT_REV=$CHECKOUT_REV"

          echo "DEBUG=$DEBUG" >> $GITHUB_OUTPUT
          echo "SKIP_CI=$SKIP_CI" >> $GITHUB_OUTPUT
          echo "SKIP_TESTS=$SKIP_TESTS" >> $GITHUB_OUTPUT
          echo "DRY_RUN_RELEASE=$DRY_RUN_RELEASE" >> $GITHUB_OUTPUT
          echo "CHECKOUT_REF=$CHECKOUT_REF" >> $GITHUB_OUTPUT
          echo "CHECKOUT_REV=$CHECKOUT_REV" >> $GITHUB_OUTPUT

  detect-changes:
    needs: set-variables
    if: ${{ needs.set-variables.outputs.skip_ci != 'true' }}
    uses: ./.github/workflows/detect-changes.yaml

  nixci:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [
            ubuntu-latest,
            # macos-latest
          ]
    needs: set-variables
    if: ${{ needs.set-variables.outputs.skip_ci != 'true' }}
    concurrency:
      group: nixci-${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    steps:
      - name: Install dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -yq zstd
          sudo apt-get clean
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@a48face58194521af687ce7df4c802b1b558e743 # ratchet:DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: "system-features = nixos-test benchmark big-parallel kvm"
      - name: Setup remote cache
        # TODO: disable continue-on-error https://www.github.com/cachix/cachix-action/issues/200
        uses: cachix/cachix-action@be5295a636153b6ad194d3245f78f8e0b78dc704 # ratchet:cachix/cachix-action@master
        continue-on-error: true
        with:
          name: "${{ vars.CACHIX_CACHE_NAME }}"
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          extraPullNames: nix-community,pyproject-nix,sciexp,srid
      - name: Setup tmate debug session
        uses: mxschmitt/action-tmate@e5c7151931ca95bad1c6f4190c730ecf8c7dde48 # ratchet:mxschmitt/action-tmate@v3
        if: ${{ inputs.debug_enabled }}
      - name: Install omnix
        run: nix --accept-flake-config profile install "github:juspay/omnix"
      - name: Summarize flake
        run: om show .
      - name: Run flake CI
        run: |
          nix run github:srid/nixci -- build

  test-unirepo:
    needs: [set-variables]
    if: ${{ needs.set-variables.outputs.skip_ci != 'true' && needs.set-variables.outputs.skip_tests != 'true' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    uses: ./.github/workflows/python-test.yaml
    with:
      python-version: ${{ matrix.python-version }}
      debug_enabled: ${{ needs.set-variables.outputs.debug }}
      monorepo: "false"
      checkout_ref: ${{ needs.set-variables.outputs.checkout_ref }}

  test-monorepo:
    needs: [set-variables]
    if: ${{ needs.set-variables.outputs.skip_ci != 'true' && needs.set-variables.outputs.skip_tests != 'true' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    uses: ./.github/workflows/python-test.yaml
    with:
      python-version: ${{ matrix.python-version }}
      debug_enabled: ${{ needs.set-variables.outputs.debug }}
      monorepo: "true"
      checkout_ref: ${{ needs.set-variables.outputs.checkout_ref }}

  # test-release:
  #   runs-on: ubuntu-latest
  #   needs: [set-variables, detect-changes, test-unirepo, test-monorepo]
  #   permissions:
  #     contents: write
  #   if: |
  #     github.event_name == 'pull_request' &&
  #     needs.set-variables.outputs.dry_run_release == 'true'
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       package:
  #         - name: python-nix-template
  #           path: "."
  #           change-output: main-package-changed
  #           apply-monorepo-patch: false
  #         - name: pnt-functional
  #           path: packages/pnt-functional
  #           change-output: functional-package-changed
  #           apply-monorepo-patch: true
  #   steps:
  #     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         ref: ${{ needs.set-variables.outputs.checkout_ref }}

  #     - name: Apply monorepo patch
  #       if: ${{ matrix.package.apply-monorepo-patch }}
  #       run: git apply scripts/monorepo_pyproject.patch

  #     - name: Setup Yarn
  #       uses: threeal/setup-yarn-action@v2.0.0
  #       with:
  #         version: "4.6.0"
  #         cache: true

  #     - name: Install dependencies
  #       run: |
  #         yarn workspace ${{ matrix.package.name }} install
  #         git log --oneline --branches --tags

  #     - name: Test semantic-release
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         unset GITHUB_ACTIONS
  #         yarn workspace ${{ matrix.package.name }} test-release -b ${{ needs.set-variables.outputs.checkout_ref }}

  # release:
  #   runs-on: ubuntu-latest
  #   needs: [nixci, test-unirepo, test-monorepo, detect-changes]
  #   if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/beta') }}
  #   environment:
  #     name: release
  #     url: https://github.com/sciexp/python-nix-template/releases/tag/${{ steps.semanticrelease.outputs.git-tag }}
  #   permissions:
  #     contents: write
  #   outputs:
  #     version: ${{ steps.semanticrelease.outputs.version }}
  #     released: ${{ steps.semanticrelease.outputs.released }}
  #     git-head: ${{ steps.semanticrelease.outputs.git-head }}
  #     git-tag: ${{ steps.semanticrelease.outputs.git-tag }}
  #   steps:
  #     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Install uv
  #       uses: astral-sh/setup-uv@f94ec6bedd8674c4426838e6b50417d36b6ab231 # ratchet:astral-sh/setup-uv@v5
  #       with:
  #         python-version: "3.12"
  #         enable-cache: true
  #         cache-dependency-glob: "uv.lock"
  #         version: "0.6.4"

  #     - name: Run semantic-release
  #       id: semanticrelease
  #       uses: cycjimmy/semantic-release-action@b1b432f13acb7768e0c8efdec416d363a57546f2 # ratchet:cycjimmy/semantic-release-action@v4
  #       with:
  #         semantic_version: 24
  #         extra_plugins: |
  #           @semantic-release/changelog
  #           @semantic-release/git
  #           semantic-release-major-tag
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Minimize uv cache
  #       run: uv cache prune --ci
  #       if: always()

  build-and-release-main-package:
    needs: [release, detect-changes]
    if: ${{ needs.release.outputs.released == 'true' }}
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/package-release.yaml
    with:
      package-path: "."
      package-name: "python-nix-template"
      version: ${{ needs.release.outputs.version }}
      apply-monorepo-patch: false
      run-if-changed-only: true
      change-detected: ${{ needs.detect-changes.outputs.main-package-changed }}
      release-dry-run: false
    secrets: inherit

  build-and-release-functional-package:
    needs: [release, detect-changes]
    if: ${{ needs.release.outputs.released == 'true' }}
    permissions:
      contents: write
      id-token: write
    uses: ./.github/workflows/package-release.yaml
    with:
      package-path: "packages/pnt-functional"
      package-name: "pnt-functional"
      version: ${{ needs.release.outputs.version }}
      apply-monorepo-patch: true
      run-if-changed-only: true
      change-detected: ${{ needs.detect-changes.outputs.functional-package-changed }}
      release-dry-run: false
    secrets: inherit

  # publish-main-package:
  #   needs: [release, build-and-release-main-package]
  #   if: ${{ needs.release.outputs.released == 'true' && needs.build-and-release-main-package.outputs.released == 'true' }}
  #   uses: ./.github/workflows/python-release.yaml
  #   with:
  #     package-name: "python-nix-template"
  #     artifact-name: ${{ needs.build-and-release-main-package.outputs.artifact-name }}
  #     version: ${{ needs.release.outputs.version }}

  # publish-functional-package:
  #   needs: [release, build-and-release-functional-package]
  #   if: ${{ needs.release.outputs.released == 'true' && needs.build-and-release-functional-package.outputs.released == 'true' }}
  #   uses: ./.github/workflows/python-release.yaml
  #   with:
  #     package-name: "pnt-functional"
  #     artifact-name: ${{ needs.build-and-release-functional-package.outputs.artifact-name }}
  #     version: ${{ needs.release.outputs.version }}

  build-pr-images:
    needs: [set-variables]
    if: ${{ needs.set-variables.outputs.skip_ci != 'true' && ( contains(github.event.pull_request.labels.*.name, 'build-images') || (github.event_name == 'workflow_dispatch' && inputs.run_build_images) ) }}
    uses: ./.github/workflows/build-nix-images.yaml
    concurrency:
      group: bni-${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    with:
      debug_enabled: ${{ needs.set-variables.outputs.debug }}
      version: ""
      images: '["python-nix-template", "python-nix-template-dev"]'
      branch: ${{ needs.set-variables.outputs.checkout_ref }}
      revision: ${{ needs.set-variables.outputs.checkout_rev }}
      mode: "dev"
    secrets: inherit

  publish-release-images:
    needs: [set-variables, release]
    if: ${{ needs.release.outputs.released == 'true' }}
    uses: ./.github/workflows/build-nix-images.yaml
    concurrency:
      group: pri-${{ github.workflow }}-${{ github.ref_name }}-${{ github.sha }}
      cancel-in-progress: true
    with:
      debug_enabled: ${{ needs.set-variables.outputs.debug }}
      version: ${{ needs.release.outputs.version }}
      images: '["python-nix-template", "python-nix-template-dev"]'
      branch: ${{ needs.set-variables.outputs.checkout_ref }}
      revision: ${{ needs.release.outputs.git-head }}
    secrets: inherit
