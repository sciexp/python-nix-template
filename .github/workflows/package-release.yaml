name: Package Release

on:
  workflow_dispatch:
    inputs:
      package-path:
        description: "Path to the package directory"
        required: true
        type: string
      package-name:
        description: "Name of the package"
        required: true
        type: string
      version:
        description: "Version to release"
        required: true
        type: string
      apply-monorepo-patch:
        description: "Apply monorepo patch before releasing"
        required: false
        type: boolean
        default: false
      run-if-changed-only:
        description: "Run only if this package has changed"
        required: false
        type: boolean
        default: false
      change-detected:
        description: "Whether changes were detected for this package"
        required: false
        type: boolean
        default: true
      release-dry-run:
        description: "Whether to run the release in dry-run mode"
        required: false
        type: boolean
        default: false
      branches:
        description: "Branches to release"
        required: false
        type: string
        default: |
          [
            'main',
            {
              name: 'beta',
              prerelease: true
            }
          ]

  workflow_call:
    inputs:
      package-path:
        description: "Path to the package directory"
        required: true
        type: string
      package-name:
        description: "Name of the package"
        required: true
        type: string
      version:
        description: "Version to release"
        required: true
        type: string
      apply-monorepo-patch:
        description: "Apply monorepo patch before releasing"
        required: false
        type: string
        default: "false"
      run-if-changed-only:
        description: "Run only if this package has changed"
        required: false
        type: string
        default: "false"
      change-detected:
        description: "Whether changes were detected for this package"
        required: false
        type: string
        default: "true"
      release-dry-run:
        description: "Whether to run the release in dry-run mode"
        required: false
        type: string
        default: "false"
      branches:
        description: "Branches to release"
        required: false
        type: string
        default: |
          [
            'main',
            {
              name: 'beta',
              prerelease: true
            }
          ]

    outputs:
      artifact-name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.release.outputs.artifact-name }}
      version:
        description: "Released version"
        value: ${{ jobs.release.outputs.version }}
      released:
        description: "Whether a new release was published"
        value: ${{ jobs.release.outputs.released }}
      tag:
        description: "Git tag created for the release"
        value: ${{ jobs.release.outputs.tag }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    if: ${{ inputs.run-if-changed-only != 'true' || inputs.change-detected == 'true' }}
    outputs:
      artifact-name: ${{ steps.set-outputs.outputs.artifact-name }}
      version: ${{ steps.semantic-release.outputs.new_release_version || inputs.version }}
      released: ${{ steps.semantic-release.outputs.new_release_published || 'false' }}
      tag: ${{ steps.semantic-release.outputs.new_release_git_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false # Important for protected branches

      - name: Apply monorepo patch
        if: ${{ inputs.apply-monorepo-patch == 'true' }}
        run: git apply scripts/monorepo_pyproject.patch

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.12"
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          version: "0.6.4"

      - name: Run semantic-release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          working_directory: ${{ inputs.package-path }}
          dry_run: ${{ inputs.release-dry-run == 'true' }}
          branches: ${{ inputs.branches }}
          semantic_version: 24
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            semantic-release-major-tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTIONS: ${{ inputs.release-dry-run == 'false' }}

      - name: Set outputs
        id: set-outputs
        run: |
          ARTIFACT_NAME="${{ inputs.package-name }}-${{ github.run_id }}"
          echo "artifact-name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

          # Log release information
          if [ "${{ steps.semantic-release.outputs.new_release_published }}" == "true" ]; then
            echo "📦 Package ${{ inputs.package-name }} released version ${{ steps.semantic-release.outputs.new_release_version }}"
            echo "🏷️ Tag: ${{ steps.semantic-release.outputs.new_release_git_tag }}"
          else
            echo "ℹ️ No release needed for ${{ inputs.package-name }}"
          fi

      - name: Build package
        if: ${{ steps.semantic-release.outputs.new_release_published == 'true' || inputs.release-dry-run == 'true' }}
        run: |
          cd ${{ inputs.package-path }}
          uv build

      - name: Upload artifacts
        if: ${{ steps.semantic-release.outputs.new_release_published == 'true' || inputs.release-dry-run == 'true' }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # ratchet:actions/upload-artifact@v4
        with:
          name: ${{ steps.set-outputs.outputs.artifact-name }}
          path: ${{ inputs.package-path }}/dist/*.{whl,tar.gz}

      - name: Publish to PyPI
        if: ${{ steps.semantic-release.outputs.new_release_published == 'true' && inputs.release-dry-run != 'true' }}
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # ratchet:pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ${{ inputs.package-path }}/dist

      - name: Minimize uv cache
        run: uv cache prune --ci
        if: always()
